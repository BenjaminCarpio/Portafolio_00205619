/Obtenga el elemento que se encuentra al fondo de la pila, dejando la pila vacia.
#include <iostream>
using namespace std;

struct nodo{
    float elemento;
    struct nodo *siguiente;
};
typedef struct nodo *Pila;

void initialize(Pila *s){
    *s = NULL;
}

bool empty(Pila *s){
    return *s == NULL;
}

void push(Pila *s, float e){
    struct nodo *unNodo;
    unNodo = (struct nodo *)malloc(sizeof(struct nodo));
    unNodo->elemento = e;
    unNodo->siguiente = *s;
   
    *s = unNodo;
}

float pop(Pila *s){
    if(!empty(s)){
        struct nodo *unNodo = *s;
        float e = (*s)->elemento;
        *s = (*s)->siguiente;
        delete(unNodo);
        return e;
    }
    else{
        cout << "Underflow!" << endl;
        return -1;
    }
}

float top(Pila *s){
    if(!empty(s)){
        float e = (*s)->elemento;
        return e;
    }
    else{
        cout << "Underflow!" << endl;
        return -1;
    }
}

int main(){
    Pila unaPila;
    initialize(&unaPila);
    int tam, j;
    cout<<"Cuantos elementos tendra la pila? "<<endl;
    cin>>tam;
    cout << endl << "Haiendo los 'push'....."<<endl<<"Ingrese los valores: " << endl;
    for (int i=0; i<tam;i++){
    cin>>j;
    push(&unaPila, j);
    }
   
    cout << endl << "Mostrando elemento 'top' de la pila......" << endl;
    cout << "Top: " << top(&unaPila) << endl;
   
    cout << endl << "Haciendo los 'pop' a la pila......" << endl<<endl;
    for (int i=1; i<tam;i++){
    cout << "Elemento que salio de la pila:: " << pop(&unaPila) << endl;
    }
   
    cout<<"Ultimo elemento de la pila: "<<pop(&unaPila)<<endl;
    cout<<"Comprobando que la pila este vacia....."<<endl;
   
    pop(&unaPila);

    return 0;
}

